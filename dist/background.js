!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";t.r(n);var o,r={general:{extensionName:"sfx",extensionId:"555",chromeExtensionProtocol:"chrome-extension:"},libraries:{PubSub:{portMessageType:"PubSub",urlPattern:"https://*/*"}},services:{},models:{UserOptions:{storageKey:"UserOptions",defaults:{isUrlRewriterOn:!0}}},background:{},content:{},popup:{},options:{}},s=function(){function e(){}return e.init=function(){return chrome.runtime.onMessage.addListener(function(n){n.extensionName===r.general.extensionName&&n.extensionId===r.general.extensionId&&n.messageType===r.libraries.PubSub.portMessageType&&e.emitLocal(n.eventName,n.data)}),e.getIsContentPage()},e.getIsContentPage=function(){return location.protocol!==r.general.chromeExtensionProtocol},e.subscribe=function(n,t){e.callbacksByEvents[n]=e.callbacksByEvents[n]||[],e.callbacksByEvents[n].push(t)},e.unsubscribe=function(n,t){var o=e.callbacksByEvents[n];if(o)for(var r=0;r<o.length;r++)if(o[r]===t){o.splice(r,1);break}},e.emit=function(n,t){void 0===t&&(t={}),e.emitGlobal(n,t),e.emitLocal(n,t)},e.emitLocal=function(n,t){var o=e.callbacksByEvents[n];o&&o.forEach(function(e){e(t)})},e.emitGlobal=function(n,t){e.isContentPage||e.sendMessageToContent(n,t),e.sendMessageToExtension(n,t)},e.sendMessageToExtension=function(e,n){var t=new i(e,n);chrome.runtime.sendMessage(t)},e.sendMessageToContent=function(e,n){var t=new i(e,n);chrome.tabs.query({url:r.libraries.PubSub.urlPattern},function(e){for(var n=0;n<e.length;++n)chrome.tabs.sendMessage(e[n].id,t)})},e.callbacksByEvents={},e.isContentPage=e.init(),e}(),i=function(e,n){this.extensionName=r.general.extensionName,this.extensionId=r.general.extensionId,this.messageType=r.libraries.PubSub.portMessageType,this.eventName=e,this.data=n};!function(e){e.onUserOptionsUpdate="onUserOptionsUpdate"}(o||(o={}));var a=r.models.UserOptions.storageKey,c=r.models.UserOptions.defaults,u=function(e){void 0===e&&(e=c.isUrlRewriterOn),this.__key__=a,this.isUrlRewriterOn=e},l=function(){function e(){}return e.sync=function(n){e.get(n,function(n){e.set(n)})},e.get=function(e,n){chrome.storage.local.get(e.__key__,function(t){var o=t[e.__key__],r=Object.assign({},e);if(void 0!==o)for(var s in r)void 0!==o[s]&&(r[s]=o[s]);n(r)})},e.set=function(e){var n;chrome.storage.local.set(((n={})[e.__key__]=e,n))},e}();l.sync(new u),s.subscribe(o.onUserOptionsUpdate,function(e){l.set(e),console.log(e)}),l.get(new u,function(e){console.log(e)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,